# automatically generated by the FlatBuffers compiler, do not modify

# namespace: demon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Inotify(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Inotify()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInotify(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Inotify
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Inotify
    def RootPaths(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Inotify
    def Mask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Inotify
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def InotifyStart(builder):
    builder.StartObject(3)

def Start(builder):
    InotifyStart(builder)

def InotifyAddRootPaths(builder, rootPaths):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rootPaths), 0)

def AddRootPaths(builder, rootPaths):
    InotifyAddRootPaths(builder, rootPaths)

def InotifyAddMask(builder, mask):
    builder.PrependInt32Slot(1, mask, 0)

def AddMask(builder, mask):
    InotifyAddMask(builder, mask)

def InotifyAddSize(builder, size):
    builder.PrependUint32Slot(2, size, 0)

def AddSize(builder, size):
    InotifyAddSize(builder, size)

def InotifyEnd(builder):
    return builder.EndObject()

def End(builder):
    return InotifyEnd(builder)
