# automatically generated by the FlatBuffers compiler, do not modify

# namespace: demon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RunCommand(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RunCommand()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRunCommand(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RunCommand
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RunCommand
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RunCommand
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RunCommand
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RunCommand
    def ArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # RunCommand
    def Envp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RunCommand
    def EnvpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RunCommand
    def EnvpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # RunCommand
    def Flags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RunCommand
    def StackSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # RunCommand
    def ToWatch(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from demon.SurveillanceEvent import SurveillanceEvent
            obj = SurveillanceEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RunCommand
    def ToWatchLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RunCommand
    def ToWatchIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def RunCommandStart(builder):
    builder.StartObject(6)

def Start(builder):
    RunCommandStart(builder)

def RunCommandAddPath(builder, path):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)

def AddPath(builder, path):
    RunCommandAddPath(builder, path)

def RunCommandAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def AddArgs(builder, args):
    RunCommandAddArgs(builder, args)

def RunCommandStartArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartArgsVector(builder, numElems: int) -> int:
    return RunCommandStartArgsVector(builder, numElems)

def RunCommandAddEnvp(builder, envp):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(envp), 0)

def AddEnvp(builder, envp):
    RunCommandAddEnvp(builder, envp)

def RunCommandStartEnvpVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnvpVector(builder, numElems: int) -> int:
    return RunCommandStartEnvpVector(builder, numElems)

def RunCommandAddFlags(builder, flags):
    builder.PrependUint32Slot(3, flags, 0)

def AddFlags(builder, flags):
    RunCommandAddFlags(builder, flags)

def RunCommandAddStackSize(builder, stackSize):
    builder.PrependUint32Slot(4, stackSize, 0)

def AddStackSize(builder, stackSize):
    RunCommandAddStackSize(builder, stackSize)

def RunCommandAddToWatch(builder, toWatch):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(toWatch), 0)

def AddToWatch(builder, toWatch):
    RunCommandAddToWatch(builder, toWatch)

def RunCommandStartToWatchVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartToWatchVector(builder, numElems: int) -> int:
    return RunCommandStartToWatchVector(builder, numElems)

def RunCommandEnd(builder):
    return builder.EndObject()

def End(builder):
    return RunCommandEnd(builder)
