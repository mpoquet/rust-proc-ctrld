# automatically generated by the FlatBuffers compiler, do not modify

# namespace: demon

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SocketWatchTerminated(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SocketWatchTerminated()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSocketWatchTerminated(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SocketWatchTerminated
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SocketWatchTerminated
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SocketWatchTerminated
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SocketWatchTerminatedStart(builder):
    builder.StartObject(2)

def Start(builder):
    SocketWatchTerminatedStart(builder)

def SocketWatchTerminatedAddPort(builder, port):
    builder.PrependInt32Slot(0, port, 0)

def AddPort(builder, port):
    SocketWatchTerminatedAddPort(builder, port)

def SocketWatchTerminatedAddState(builder, state):
    builder.PrependInt8Slot(1, state, 0)

def AddState(builder, state):
    SocketWatchTerminatedAddState(builder, state)

def SocketWatchTerminatedEnd(builder):
    return builder.EndObject()

def End(builder):
    return SocketWatchTerminatedEnd(builder)
